using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace Activity12
{
    class Program
    {
        static void Main(string[] args)
        {
            string fileName; // A string variable that will contain the name of the file as entered by the user
            string fileContents; // A string variable that will contain the contents of the chosen file
            List<string> words; // A list of string objects that will contain the individual words in the chosen file
            List<string> wordsEndingWithE; // A list of string objects that will contain the words in the chosen file that end with the letter E
            List<string> wordsEndingWithT; // A list of string objects that will contain the words in the chosen file that end with the letter T
            StreamReader file; // A StreamReader object that will be used to read the chosen file

            Console.WriteLine("Enter file to read: "); // The user is prompted to enter a file
            try
            {
                fileName = Console.ReadLine(); // The fileName variable is set to the data entered by the user
                file = File.OpenText(fileName); // The file StreamReader is set to the file specified by the user
                fileContents = ReadFile(file); // The ReadFile method is called with the file StreamReader as a paramater. The fileContents variable is set to the result
                file.Close(); // The file StreamReader is closed
                fileContents = fileContents.ToLower(); // The fileContents variable is set to be all lowercase so as to simplify the process of analyzing it
                fileContents = RemovePunctuation(fileContents); // The RemovePunctuation method is called with the fileContents variable as a parameter, and the fileContents variable is set to the result
                words = WordsFromSentence(fileContents); // The WordsFromSentence method is called with the fileContents variable as a parameter, and the words List is set to the result
                wordsEndingWithE = FindWordsEndingWithLetter(words, 'e'); // The FindWordsEndingWithLetter method is called with the words list and the letter 'e' as parameters. The wordsEndingWithE List is set to the result
                wordsEndingWithT = FindWordsEndingWithLetter(words, 't'); // The FindWordsEndingWithLetter method is called with the words list and the letter 't' as parameters. The wordsEndingWithT List is set to the result

                Console.WriteLine("There are " + (wordsEndingWithE.Count + wordsEndingWithT.Count).ToString() + " words ending with e or t in the chosen file."); // The sum of the lengths of the The wordsEndingWithE List and the The wordsEndingWithT List are written to the console
                Console.WriteLine("Press any key to exit."); // The user is prompted to enter any key to exit
                Console.ReadKey(); // The program waits for the user to enter any key
            } 
            catch(Exception ex) // If any exceptions are generated by the above code, an error message is written to the console
            {
                Console.WriteLine(ex.Message);
            }


        }

        // This method reads the contents of a file, returning its contents as a single string
        private static string ReadFile(StreamReader file)
        {
            string contents = ""; // A string variable that will eventually contain the contents of the file

            while(!file.EndOfStream) // This loop runs until every line of the file has been processed
            {
                contents += file.ReadLine() + " "; // The current line is added to the contents variable along with a space
            }

            contents = contents.Trim(); // The Trim method of the contents variable is called and the contents variable is set to the result

            return contents; // The contents variable is returned
        }

        // This method removes all punctuation from the a string, leaving only letters and spaces
        private static string RemovePunctuation(string sentence)
        {
            string result = ""; // A string variable that will eventually be returned
            string alphanumericCharacters = "abcdefghijklmnopqrstuvwxyz1234567890"; // A string variable that contains all alphanumeric characters

            for(int i = 0; i < sentence.Length; i++) // This loop runs for every character in the parameter
            {
                if(alphanumericCharacters.Contains(sentence[i]) || sentence[i] == ' ') // If the current character is alphanumeric or is a space, it is added to the result variable
                {
                    result += sentence[i];
                }
            }

            return result; // The result variable is returned

        }

        // This method returns a List of all the individual words in a sentence
        private static List<string> WordsFromSentence(string sentence)
        {
            List<string> result = new List<string>(); // A List of strings that will eventually be returned

            result.Add(""); // An empty string is added to the result List
            for(int i = 0, j = 0; i < sentence.Length; i++) // This loop runs for every character in the parameter
            {
                if(sentence[i] != ' ') // If the current character is not a space, it is added to the current item in the result List
                {
                    result[j] += sentence[i];
                }
                else // If the current character is a space, the variable keeping track of the current item in the result List is increased by one and an empty string is added to the result List
                {
                    j++;
                    result.Add("");
                }
            }

            return result; // The result List is returned
        }

        // This method takes in a List of strings and a letter and returns a List of all strings in that List that end in that letter
        private static List<string> FindWordsEndingWithLetter(List<string> words, char letter)
        {
            List<string> result = new List<string>(); // A List of strings that will eventually be returned

            for(int i = 0; i < words.Count; i++) // This loop runs for every item in the parameter List
            {
                if(words[i][words[i].Length - 1] == letter) // If the final character in the current item of the parameter List is the letter parameter, it is added to the result List
                {
                    result.Add(words[i]);
                }
            }

            return result; // The result List is returned
        }


    }
}
